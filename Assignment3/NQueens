class Solution {


    public boolean isPossible(int[][] board,int row,int col){
        int r = row;
        int c = col;


        while(r>=0){
            if(board[r][c] == 1){
                return false;
            }
            r--;
        }

        r = row;
        c = col;
        while(r >= 0 && c<board[0].length){
            if(board[r][c]==1){
                return false;
            }
            r--;
            c++;
        }

        r = row;
        c = col;

        while(r >= 0 && c>=0){
            if(board[r][c]==1){
                return false;
            }
            r--;
            c--;
        }
        return true;
    }
    public void getAns(int[][] board,int n,int row,List<List<String>> ans){
        if(n == 0){
            List<String> list = new ArrayList<>();
            for(int i=0;i<board.length;i++){
                String temp = "";
                for(int j=0;j<board[i].length;j++){
                    if(board[i][j]==1){
                        temp += "Q";
                    }else{
                        temp += ".";
                    }
                }
                list.add(temp);
            }
            ans.add(new ArrayList<>(list));
            return;
        }
        if(row>=board.length){
            return;
        }
        for(int col = 0;col<board[0].length;col++){
            if(isPossible(board,row,col)){
                board[row][col] = 1;
                getAns(board,n-1,row+1,ans);
                board[row][col]  = 0;
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        int[][] board = new int[n][n];
        List<List<String>> ans = new ArrayList<>();

        getAns(board,n,0,ans);
        return ans;
    }
}
